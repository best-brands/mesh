@mixin grid ($breakpoint, $width, $mesh-section: true, $mesh-pull-push: true, $mesh-gap: true) {
  [class*=mesh-wrapper--max-width-#{$breakpoint}] {
    max-width: $width + px
  }

  [class*=mesh-wrapper--centered-#{$breakpoint}] {
    margin: 0 auto
  }

  [class*=mesh-wrapper--relative-#{$breakpoint}] {
    position: relative;
    height: 100%
  }

  [class*=mesh-unit-#{$breakpoint}] {
    display: block;
    clear: none
  }

  @if $mesh-section {
    @for $i from 1 through 6 {
      .mesh-section-#{$breakpoint}--gap-#{$i}:not(:first-child) {
        margin-top: ($i * .4) + rem
      }
    }
  }

  @for $i from 1 through 12 {
    .mesh-unit-#{$breakpoint}--col-#{$i} {
      width: percentage($i / 12)
    }

    @supports (display:grid) {
      .mesh-unit-#{$breakpoint}--col-#{$i} {
        grid-column-end: span $i;
      }
    }
  }

  .mesh-unit-#{$breakpoint}--hidden {
    display: none
  }

  @if $mesh-pull-push {
    .mesh-unit-#{$breakpoint}--reset-clear {
      clear: none
    }

    .mesh-unit-#{$breakpoint}--pull-right {
      float: right
    }

    @for $i from 1 through 6 {
      .mesh-unit-#{$breakpoint}--pull-col-#{$i} {
        left: percentage($i / -12)
      }

      @supports (display:grid) {
        .mesh-unit-#{$breakpoint}--pull-col-#{$i} {
          grid-column-start: 1;
          grid-row-start: 1
        }
      }

      .mesh-unit-#{$breakpoint}--push-col-#{$i} {
        left: percentage($i / 12)
      }

      @supports (display:grid) {
        .mesh-unit-#{$breakpoint}--push-col-#{$i} {
          grid-column-start: 1 + $i;
          grid-row-start: 1
        }
      }
    }
  }

  @supports (display:grid) {
    .mesh-unit-#{$breakpoint}--vertical-align-center {
      align-self: center
    }
  }

  $directions: x, y;

  @if $mesh-gap {
    @each $direction in $directions {
      $direction: nth($direction, 1);
      @for $i from 1 through 10 {
        @if $i <= 4 or $i % 2 == 0 {
          .mesh-container-#{$breakpoint}--gap-#{$i}--#{$direction} {
            margin-right: (-.2 * $i) + rem;
            margin-left: (-.2 * $i) + rem;

            > [class*=mesh-unit] {
              padding: 0 ($i * .2) + rem
            }
          }

          @supports (display:grid) {
            .mesh-container-#{$breakpoint}--gap-#{$i}--#{$direction} {
              margin: 0;
              grid-column-gap: ($i * .4) + rem;

              > [class*=mesh-unit] {
                padding: 0
              }
            }
          }
        }
      }
    }
  }

  @supports (display:grid) {
    [class*=mesh-container-#{$breakpoint}--inline] {
      display: inline-grid;
      width: 100%
    }
  }

  [class*=mesh-wrapper-#{$breakpoint}--inverted-margin] {
    margin: 0 -1.2rem
  }

  [class*=mesh-wrapper-#{$breakpoint}--inverted-margin-s] {
    margin: 0 -1.6rem
  }

  [class*=mesh-wrapper-#{$breakpoint}--padding] {
    padding: 0 1.2rem
  }

  [class*=mesh-wrapper-#{$breakpoint}--layout-wrapper] {
    max-width: 128rem;
    margin: 0 auto
  }

  /**
   * Cards for stacking content items easily
   */

  .mesh-card-from-size-#{$breakpoint} {
    padding: 3.2rem;
    border: 1px solid #ddd;
    border-radius: 3px;
    overflow: hidden;
  }

  @for $i from 1 through 3 {
    .mesh-card-from-size-#{$breakpoint}--with-gap-#{$i} {
      padding: ($i * .4) + rem;
    }
  }

  .mesh-card-from-size-#{$breakpoint} {
    display: inline-block;
    max-width: 100%;
    vertical-align: bottom;
  }

  /**
   * Utility functions for easier content control
   */

  .is-hidden-from-size-#{$breakpoint} {
    display: none !important;
  }

  .is-visible-from-size-#{$breakpoint} {
    display: block !important;
  }

  .is-visible-inline-from-size-s-#{$breakpoint} {
    display: inline !important;
  }

  .is-visible-inline-block-from-size-#{$breakpoint} {
    display: inline-block !important;
  }

  .is-visible-flex-from-size-#{$breakpoint} {
    display: flex !important;
  }

  .is-visible-inline-flex-from-size-#{$breakpoint} {
    display: inline-flex !important;
  }

  .text-align-center-from-size-#{$breakpoint} {
    text-align: center !important;
  }

  .text-align-left-from-size-#{$breakpoint} {
    text-align: left !important;
  }

  .text-align-right-from-size-#{$breakpoint} {
    text-align: right !important;
  }
}
